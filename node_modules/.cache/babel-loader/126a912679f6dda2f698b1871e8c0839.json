{"ast":null,"code":"import _slicedToArray from \"/Users/amyriley/workspace_react/share-places/share-places-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/amyriley/workspace_react/share-places/share-places-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        inputs: _objectSpread({}, state.inputs, {\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        }),\n        isValid: formIsValid\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const _useReducer = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        formState = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  return [formState, inputHandler];\n};","map":{"version":3,"sources":["/Users/amyriley/workspace_react/share-places/share-places-frontend/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAChC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC5BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACH,SAFD,MAEO;AACHH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACH;AACJ;;AACD,+BACON,KADP;AAEIK,QAAAA,MAAM,oBACCL,KAAK,CAACK,MADP;AAEF,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAFhB,UAFV;AAMIA,QAAAA,OAAO,EAAEH;AANb;;AAQA;AACI,aAAOH,KAAP;AAnBZ;AAqBH,CAtBD;;AAwBA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAAA,sBAC7BZ,UAAU,CAACC,WAAD,EAAc;AAClDM,IAAAA,MAAM,EAAEI,aAD0C;AAElDH,IAAAA,OAAO,EAAEI;AAFyC,GAAd,CADmB;AAAA;AAAA,QACpDC,SADoD;AAAA,QACzCC,QADyC;;AAM3D,QAAMC,YAAY,GAAGhB,WAAW,CAAC,CAACiB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AACrDM,IAAAA,QAAQ,CAAC;AAACV,MAAAA,IAAI,EAAE,cAAP;AAAuBK,MAAAA,KAAK,EAAEA,KAA9B;AAAqCD,MAAAA,OAAO,EAAEA,OAA9C;AAAuDF,MAAAA,OAAO,EAAEU;AAAhE,KAAD,CAAR;AACH,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,SACI,CAACH,SAAD,EAAYE,YAAZ,CADJ;AAGH,CAbM","sourcesContent":["import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE': \n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\n                },\n                isValid: formIsValid\n            };\n            default:\n                return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    })\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id})\n    }, []);\n\n    return (\n        [formState, inputHandler]\n    )\n};"]},"metadata":{},"sourceType":"module"}