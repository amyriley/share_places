{"ast":null,"code":"import _slicedToArray from \"/Users/amyriley/workspace_react/share-places/share-places-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/amyriley/workspace_react/share-places/share-places-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/amyriley/workspace_react/share-places/share-places-frontend/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return _objectSpread({}, state, {\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      });\n\n    case 'TOUCH':\n      {\n        return _objectSpread({}, state, {\n          isTouched: true\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const _useReducer = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        inputState = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const id = props.id,\n        onInput = props.onInput;\n  const value = inputState.value,\n        isValid = inputState.isValid;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }) : React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: props.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, props.label), element, !inputState.isValid && inputState.isTouched && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/amyriley/workspace_react/share-places/share-places-frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","initialValue","initialValid","inputState","dispatch","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n            case 'TOUCH': {\n                return {\n                  ...state,\n                  isTouched: true\n                }\n              }\n        default:\n            return state;\n    }\n}\n\nconst Input = props => {\n    const [inputState, dispatch] = useReducer(inputReducer, {\n      value: props.initialValue || '',\n      isTouched: false,\n      isValid: props.initialValid || false\n    });\n\n    const { id, onInput } = props;\n\n    const { value, isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value, isValid)\n    }, [id, value, isValid, onInput]);\n\n    const changeHandler = event => {\n        dispatch({\n            type: 'CHANGE', \n            val: event.target.value, \n            validators: props.validators});\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: 'TOUCH'\n        })\n    }\n\n    const element = props.element === 'input' ? <input \n        id={props.id} \n        type={props.type} \n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n    /> \n    : (\n    <textarea \n        id={props.id} \n        rows={props.rows || 3} \n        onChange={changeHandler} \n        onBlur={touchHandler}\n        value={inputState.value}\n    />\n    );\n\n    return (\n        <div className={`form-control ${!inputState.isValid && inputState.isTouched && \n            'form-control--invalid'}`}\n        >\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n        </div>\n    )\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}